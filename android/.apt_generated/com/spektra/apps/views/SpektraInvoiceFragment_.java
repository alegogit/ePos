//
// DO NOT EDIT THIS FILE, IT HAS BEEN GENERATED USING AndroidAnnotations.
//


package com.spektra.apps.views;

import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.TextView;
import com.spektra.apps.R.layout;
import com.spektra.apps.customUI.PullToRefresh;
import com.spektra.apps.models.ResponseInvoiceList;

public final class SpektraInvoiceFragment_
    extends SpektraInvoiceFragment
{

    private View contentView_;

    private void init_(Bundle savedInstanceState) {
        injectFragmentArguments_();
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        init_(savedInstanceState);
        super.onCreate(savedInstanceState);
    }

    private void afterSetContentView_() {
        mName = ((TextView) findViewById(com.spektra.apps.R.id.name));
        list = ((PullToRefresh) findViewById(com.spektra.apps.R.id.invoice_listview));
        {
            AdapterView<?> view = ((AdapterView<?> ) findViewById(com.spektra.apps.R.id.invoice_listview));
            if (view!= null) {
                view.setOnItemClickListener(new OnItemClickListener() {


                    @Override
                    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                        onItemClicked(((ResponseInvoiceList) parent.getAdapter().getItem(position)));
                    }

                }
                );
            }
        }
        pullToRefresh();
        loadInvoices();
        setListAnimation();
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        contentView_ = super.onCreateView(inflater, container, savedInstanceState);
        if (contentView_ == null) {
            contentView_ = inflater.inflate(layout.spektra_invoice_fragment_layout, container, false);
        }
        return contentView_;
    }

    @Override
    public void onViewCreated(View view, Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        afterSetContentView_();
    }

    public View findViewById(int id) {
        if (contentView_ == null) {
            return null;
        }
        return contentView_.findViewById(id);
    }

    public static SpektraInvoiceFragment_.FragmentBuilder_ builder() {
        return new SpektraInvoiceFragment_.FragmentBuilder_();
    }

    private void injectFragmentArguments_() {
        Bundle args_ = getArguments();
        if (args_!= null) {
            if (args_.containsKey("mSearch")) {
                try {
                    mSearch = args_.getString("mSearch");
                } catch (ClassCastException e) {
                    Log.e("SpektraInvoiceFragment_", "Could not cast argument to the expected type, the field is left to its default value", e);
                }
            }
            if (args_.containsKey("mFilter")) {
                try {
                    mFilter = args_.getString("mFilter");
                } catch (ClassCastException e) {
                    Log.e("SpektraInvoiceFragment_", "Could not cast argument to the expected type, the field is left to its default value", e);
                }
            }
        }
    }

    public static class FragmentBuilder_ {

        private Bundle args_;

        private FragmentBuilder_() {
            args_ = new Bundle();
        }

        public SpektraInvoiceFragment build() {
            SpektraInvoiceFragment_ fragment_ = new SpektraInvoiceFragment_();
            fragment_.setArguments(args_);
            return fragment_;
        }

        public SpektraInvoiceFragment_.FragmentBuilder_ mSearch(String mSearch) {
            args_.putString("mSearch", mSearch);
            return this;
        }

        public SpektraInvoiceFragment_.FragmentBuilder_ mFilter(String mFilter) {
            args_.putString("mFilter", mFilter);
            return this;
        }

    }

}
